const fs = require('fs');
const {parse: parsePath} = require('path-to-regexp');
const {codeSchemaToString} = require('../annotations/response');

module.exports = function openApi(endpoints, path) {
	const stream = fs.createWriteStream(path);

	var p = new Promise(function (done, fail) {
		stream.on('finish', done);
		stream.on('error', fail);
	});

	var paths = {};
	var components = {};
	var schemas = components.schemas = {};

	endpoints.forEach(function (e) {
		let parameters = [];

		var url = parsePath(e.url.path).map(function (item) {
			if (typeof item === 'string') return item;

			var param = {
				name: item.name,
				in: 'path',
				required: item.modifier === '+' || !item.modifier
			}

			if (typeof item.name === 'number') {
				param.name = 'regexp' + item.name;
				param.schema = {
					type: 'string',
					pattern: item.pattern,
				};
			}
			else if (e.params && e.params.names.includes(item.name)) {
				let {description, ...schema} = e.params.schema.properties[item.name];
				param.description = description;
				param.schema = schema;
			}

			parameters.push(param);

			return item.prefix + '{' + param.name + '}' + item.suffix;
		}).join('');

		var path = paths[url];

		if (!path) {
			path = paths[url] = {
				parameters: []
			};
		}

		if (parameters.length > 0) {
			path.parameters = path.parameters.concat(parameters);
		}

		if (e.query) {
			e.query.names.forEach(function (name) {
				var {description, ...schema} = e.query.schema.properties[name];

				path.parameters.push({
					name,
					in: 'query',
					required: e.query.schema.required.includes(name),
					description,
					schema,
				});
			});
		}

		var method = path[e.url.method.toLowerCase()] = {};

		if (e.description) {
			method.description = e.description;
		}

		if (e.body) {
			let {title, description, ...schema} = e.body.schema;

			description = description || e.body.description;

			if (title) {
				schemas[title] = schema;
				schema = {
					'$ref': '#/components/schemas/' + title
				};
			}

			method.requestBody = {
				description,
				content: {
					'application/json': {
						schema
					}
				}
			};
		}

		if (e.response && e.response.length > 0) {
			let responses = method.responses = {};

			e.response.forEach(function (res) {
				let {title, description, ...schema} = res.schema;

				description = description || res.description;

				if (title) {
					schemas[title] = schema;
					schema = {
						'$ref': '#/components/schemas/' + title
					};
				}

				codeSchemaToString(res.code).split(' || ').forEach(function (code) {
					responses[code.toUpperCase()] = {
						description,
						content: {
							'application/json': {
								schema
							}
						}
					};
				});
			});
		}
	});

	stream.write(JSON.stringify({
		openapi: '3.0.3',
		info: {
			title: 'Autogenerated OpenAPI'
		},
		paths,
		components,
	}, null, '\t'));

	stream.end();

	return p;
};